"""
Bot de Trading Intrad√≠a con WebSocket en Tiempo Real
Integra detecci√≥n de momentum, precio de entrada y alertas de precauci√≥n
"""

import asyncio
import json
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import logging
import signal
import sys
import os

# Agregar path para imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Imports con fallback
try:
    from src.data_sources.binance_websocket_aggregator import BinanceWebSocketAggregator
    from src.strategies.intraday_trading_signals import IntradayTradingSignals, SignalType, RiskLevel
    from src.strategies.momentum_detector import MomentumDetector
    from src.utils.logger import get_logger
except ImportError:
    try:
        from data_sources.binance_websocket_aggregator import BinanceWebSocketAggregator
        from strategies.intraday_trading_signals import IntradayTradingSignals, SignalType, RiskLevel
        from strategies.momentum_detector import MomentumDetector
        from utils.logger import get_logger
    except ImportError:
        def get_logger(name):
            logger = logging.getLogger(name)
            if not logger.handlers:
                handler = logging.StreamHandler()
                formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
                handler.setFormatter(formatter)
                logger.addHandler(handler)
                logger.setLevel(logging.INFO)
            return logger

logger = get_logger(__name__)

class LiveIntradayTradingBot:
    """
    Bot de trading intrad√≠a en tiempo real con WebSocket
    """
    
    def __init__(self, config: Optional[Dict] = None):
        self.config = config or {}
        self.logger = get_logger(__name__)
        
        # Configuraci√≥n del bot
        self.min_momentum_threshold = self.config.get('min_momentum_threshold', 60)
        self.max_pairs_to_monitor = self.config.get('max_pairs_to_monitor', 50)
        self.signal_cooldown_minutes = self.config.get('signal_cooldown_minutes', 30)
        
        # Componentes del bot
        self.websocket_aggregator = None
        self.trading_signals = IntradayTradingSignals(config)
        self.momentum_detector = None
        
        # Estado del bot
        self.market_data = {}
        self.recent_signals = {}  # Para evitar spam
        self.is_running = False
        self.active_signals = {}
        
        # Estad√≠sticas
        self.signals_generated = 0
        self.high_confidence_signals = 0
        self.alerts_generated = 0
        
        self.logger.info("ü§ñ LiveIntradayTradingBot inicializado")
    
    async def start(self):
        """Inicia el bot de trading en tiempo real"""
        try:
            self.logger.info("üöÄ Iniciando bot de trading intrad√≠a...")
            self.is_running = True
            
            # Configurar manejo de se√±ales para parada elegante
            signal.signal(signal.SIGINT, self._signal_handler)
            signal.signal(signal.SIGTERM, self._signal_handler)
            
            # Inicializar componentes
            await self._initialize_components()
            
            # Iniciar WebSocket agregador
            await self._start_websocket_monitoring()
            
            # Bucle principal de procesamiento
            await self._main_processing_loop()
            
        except Exception as e:
            self.logger.error(f"‚ùå Error iniciando bot: {e}")
            await self.stop()
    
    async def stop(self):
        """Detiene el bot de manera elegante"""
        self.logger.info("üõë Deteniendo bot de trading...")
        self.is_running = False
        
        if self.websocket_aggregator:
            await self.websocket_aggregator.stop()
        
        self._print_final_statistics()
        self.logger.info("‚úÖ Bot detenido correctamente")
    
    async def _initialize_components(self):
        """Inicializa todos los componentes necesarios"""
        try:
            # Configuraci√≥n para WebSocket
            ws_config = {
                'max_pairs': self.max_pairs_to_monitor,
                'min_volume_usdt': 10000000,  # 10M USDT m√≠nimo
                'update_interval': 1.0,
                'enable_price_alerts': True
            }
            
            # Inicializar WebSocket aggregator
            self.websocket_aggregator = BinanceWebSocketAggregator(ws_config)
            
            # Inicializar momentum detector
            momentum_config = {
                'window_size': 20,
                'volume_threshold': 1.5,
                'price_change_threshold': 0.02
            }
            
            try:
                self.momentum_detector = MomentumDetector(momentum_config)
            except:
                self.logger.warning("‚ö†Ô∏è MomentumDetector no disponible, usando an√°lisis b√°sico")
                self.momentum_detector = None
            
            self.logger.info("‚úÖ Componentes inicializados correctamente")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error inicializando componentes: {e}")
            raise
    
    async def _start_websocket_monitoring(self):
        """Inicia el monitoreo WebSocket"""
        try:
            self.logger.info("üì° Iniciando monitoreo WebSocket...")
            
            # Configurar callback para datos de mercado
            await self.websocket_aggregator.start(
                data_callback=self._process_market_data
            )
            
            # Esperar a que se establezcan las conexiones
            await asyncio.sleep(5)
            
            pairs_count = len(self.websocket_aggregator.active_pairs)
            self.logger.info(f"‚úÖ Monitoreando {pairs_count} pares de trading")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error iniciando WebSocket: {e}")
            raise
    
    async def _process_market_data(self, symbol: str, data: Dict):
        """Procesa datos de mercado en tiempo real"""
        try:
            # Actualizar datos de mercado
            if symbol not in self.market_data:
                self.market_data[symbol] = []
            
            # Agregar nuevo punto de datos
            market_point = {
                'timestamp': datetime.now(),
                'price': float(data.get('price', 0)),
                'volume': float(data.get('volume', 0)),
                'change_24h': float(data.get('change_24h', 0))
            }
            
            self.market_data[symbol].append(market_point)
            
            # Mantener solo los √∫ltimos 100 puntos
            if len(self.market_data[symbol]) > 100:
                self.market_data[symbol] = self.market_data[symbol][-100:]
            
            # Procesar se√±ales si tenemos suficientes datos
            if len(self.market_data[symbol]) >= 20:
                await self._analyze_trading_opportunity(symbol, data)
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Error procesando datos para {symbol}: {e}")
    
    async def _analyze_trading_opportunity(self, symbol: str, current_data: Dict):
        """Analiza oportunidades de trading para un s√≠mbolo"""
        try:
            # Verificar cooldown
            if self._is_in_cooldown(symbol):
                return
            
            # Crear DataFrame con datos hist√≥ricos
            df_data = []
            for point in self.market_data[symbol]:
                df_data.append({
                    'timestamp': point['timestamp'],
                    'close': point['price'],
                    'volume': point['volume'],
                    'high': point['price'] * 1.002,  # Aproximaci√≥n
                    'low': point['price'] * 0.998,   # Aproximaci√≥n
                    'open': point['price']
                })
            
            market_df = pd.DataFrame(df_data)
            market_df.set_index('timestamp', inplace=True)
            
            # Calcular momentum
            momentum_score = self._calculate_momentum_score(market_df)
            
            # Filtrar por threshold m√≠nimo
            if momentum_score < self.min_momentum_threshold:
                return
            
            # Generar se√±al de trading
            current_price = float(current_data.get('price', 0))
            signal = self.trading_signals.generate_trading_signal(
                symbol, current_price, market_df, momentum_score
            )
            
            # Procesar se√±al generada
            await self._process_trading_signal(symbol, signal, momentum_score)
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Error analizando {symbol}: {e}")
    
    def _calculate_momentum_score(self, df: pd.DataFrame) -> float:
        """Calcula score de momentum b√°sico"""
        try:
            if self.momentum_detector:
                # Usar detector avanzado si est√° disponible
                return self.momentum_detector.calculate_momentum(df)
            else:
                # C√°lculo b√°sico de momentum
                price_change = (df['close'].iloc[-1] - df['close'].iloc[-10]) / df['close'].iloc[-10]
                volume_ratio = df['volume'].iloc[-5:].mean() / df['volume'].iloc[-20:].mean()
                
                # Score b√°sico (0-100)
                momentum = max(0, min(100, 
                    (price_change * 100 * 2) +  # Factor precio
                    (volume_ratio - 1) * 30 +    # Factor volumen
                    50                            # Base
                ))
                
                return momentum
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Error calculando momentum: {e}")
            return 50  # Momentum neutral
    
    async def _process_trading_signal(self, symbol: str, signal, momentum_score: float):
        """Procesa y muestra se√±al de trading"""
        try:
            # Actualizar estad√≠sticas
            self.signals_generated += 1
            if signal.confidence > 0.7:
                self.high_confidence_signals += 1
            if signal.alerts:
                self.alerts_generated += len(signal.alerts)
            
            # Mostrar se√±al solo si es relevante
            if (signal.signal_type in [SignalType.BUY, SignalType.WATCH] and 
                signal.confidence > 0.6):
                
                await self._display_trading_signal(symbol, signal, momentum_score)
                
                # Registrar en signals activas
                self.active_signals[symbol] = {
                    'signal': signal,
                    'timestamp': datetime.now(),
                    'momentum': momentum_score
                }
                
                # Actualizar cooldown
                self.recent_signals[symbol] = datetime.now()
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Error procesando se√±al para {symbol}: {e}")
    
    async def _display_trading_signal(self, symbol: str, signal, momentum_score: float):
        """Muestra se√±al de trading formateada"""
        try:
            print("\n" + "="*80)
            print(f"üéØ SE√ëAL DE TRADING EN VIVO - {symbol}")
            print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')} | üí∞ ${signal.current_price:.4f} | üìä Momentum: {momentum_score:.0f}")
            print("="*80)
            
            # Tipo de se√±al con emoji
            signal_emoji = {
                SignalType.BUY: "üü¢ COMPRAR",
                SignalType.WATCH: "üü° OBSERVAR", 
                SignalType.SELL: "üî¥ VENDER",
                SignalType.HOLD: "‚ö™ MANTENER",
                SignalType.AVOID: "‚ö´ EVITAR"
            }
            
            print(f"\nüìä SE√ëAL: {signal_emoji.get(signal.signal_type, signal.signal_type.value)}")
            print(f"üí™ Confianza: {signal.confidence*100:.1f}% | üéØ √âxito: {signal.probability_success*100:.1f}%")
            print(f"‚≠ê Fuerza: {signal.signal_strength}/10 | üõ°Ô∏è Riesgo: {signal.risk_level.value}")
            
            # Estrategia de entrada
            print(f"\nüíé PRECIO DE ENTRADA √ìPTIMO")
            print(f"üéØ Entrada: ${signal.entry_strategy.optimal_price:.4f}")
            print(f"üõ°Ô∏è  Stop Loss: ${signal.entry_strategy.stop_loss:.4f}")
            print(f"üé™ Take Profit 1: ${signal.entry_strategy.take_profit_1:.4f}")
            print(f"üé™ Take Profit 2: ${signal.entry_strategy.take_profit_2:.4f}")
            print(f"üìè Tama√±o: {signal.entry_strategy.position_size_recommended*100:.1f}% del capital")
            
            # Alertas de precauci√≥n
            if signal.alerts:
                print(f"\n‚ö†Ô∏è ALERTAS DE PRECAUCI√ìN:")
                for alert in signal.alerts:
                    severity = "üî¥" if alert.severity >= 8 else "üü†" if alert.severity >= 6 else "üü°"
                    print(f"   {severity} {alert.message}")
                    print(f"      üí° {alert.action_required}")
            
            # Observaciones importantes
            if signal.precautions:
                print(f"\nüîç OBSERVAR EL MOVIMIENTO:")
                for precaution in signal.precautions[:3]:  # Solo las 3 m√°s importantes
                    print(f"   ‚Ä¢ {precaution}")
            
            # Se√±ales intrad√≠a
            if signal.intraday_signals:
                active_signals = [k for k, v in signal.intraday_signals.items() 
                                if isinstance(v, dict) and v.get('active')]
                if active_signals:
                    print(f"\nüìà TRADING INTRAD√çA ACTIVO:")
                    for sig in active_signals:
                        details = signal.intraday_signals[sig]
                        timeframe = details.get('timeframe', 'N/A')
                        targets = details.get('exit_targets', [])
                        print(f"   üéØ {sig.replace('_', ' ').title()}: {timeframe} | Targets: {', '.join(targets)}")
            
            print("-" * 80)
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Error mostrando se√±al: {e}")
    
    def _is_in_cooldown(self, symbol: str) -> bool:
        """Verifica si un s√≠mbolo est√° en per√≠odo de cooldown"""
        if symbol not in self.recent_signals:
            return False
        
        last_signal = self.recent_signals[symbol]
        cooldown_period = timedelta(minutes=self.signal_cooldown_minutes)
        
        return datetime.now() - last_signal < cooldown_period
    
    async def _main_processing_loop(self):
        """Bucle principal de procesamiento"""
        self.logger.info("üîÑ Iniciando bucle principal de an√°lisis...")
        
        while self.is_running:
            try:
                # Mostrar estad√≠sticas cada 5 minutos
                if self.signals_generated > 0 and self.signals_generated % 20 == 0:
                    self._print_statistics()
                
                # Limpiar se√±ales expiradas
                await self._cleanup_expired_signals()
                
                # Esperar antes del siguiente ciclo
                await asyncio.sleep(30)  # Revisar cada 30 segundos
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"‚ùå Error en bucle principal: {e}")
                await asyncio.sleep(5)
    
    async def _cleanup_expired_signals(self):
        """Limpia se√±ales expiradas"""
        try:
            current_time = datetime.now()
            expired_symbols = []
            
            for symbol, signal_data in self.active_signals.items():
                if current_time > signal_data['signal'].expiry_time:
                    expired_symbols.append(symbol)
            
            for symbol in expired_symbols:
                del self.active_signals[symbol]
                self.logger.debug(f"üóëÔ∏è Se√±al expirada eliminada: {symbol}")
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Error limpiando se√±ales: {e}")
    
    def _print_statistics(self):
        """Imprime estad√≠sticas del bot"""
        try:
            print(f"\nüìä ESTAD√çSTICAS DEL BOT")
            print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')}")
            print(f"üéØ Se√±ales generadas: {self.signals_generated}")
            print(f"‚≠ê Alta confianza: {self.high_confidence_signals}")
            print(f"‚ö†Ô∏è Alertas emitidas: {self.alerts_generated}")
            print(f"üìà Se√±ales activas: {len(self.active_signals)}")
            print(f"üîç Pares monitoreados: {len(self.market_data)}")
            print("-" * 50)
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Error mostrando estad√≠sticas: {e}")
    
    def _print_final_statistics(self):
        """Imprime estad√≠sticas finales"""
        print(f"\nüìä ESTAD√çSTICAS FINALES DEL BOT")
        print("="*50)
        print(f"üéØ Total se√±ales generadas: {self.signals_generated}")
        print(f"‚≠ê Se√±ales alta confianza: {self.high_confidence_signals}")
        print(f"‚ö†Ô∏è Total alertas emitidas: {self.alerts_generated}")
        print(f"üìà Pares √∫nicos analizados: {len(self.market_data)}")
        
        if self.signals_generated > 0:
            confidence_rate = (self.high_confidence_signals / self.signals_generated) * 100
            print(f"üí™ Tasa de confianza: {confidence_rate:.1f}%")
        
        print("="*50)
    
    def _signal_handler(self, signum, frame):
        """Maneja se√±ales del sistema para parada elegante"""
        self.logger.info(f"üõë Se√±al {signum} recibida, deteniendo bot...")
        self.is_running = False

async def main():
    """Funci√≥n principal"""
    print("ü§ñ LIVE INTRADAY TRADING BOT")
    print("üí° Trading intrad√≠a con WebSocket en tiempo real")
    print("‚úÖ Precio de entrada √≥ptimo")
    print("‚ö†Ô∏è Alertas de precauci√≥n")
    print("üìä Se√±ales intrad√≠a")
    print("=" * 60)
    
    # Configuraci√≥n del bot
    config = {
        'min_momentum_threshold': 65,        # Momentum m√≠nimo para se√±al
        'max_pairs_to_monitor': 30,         # M√°ximo 30 pares
        'signal_cooldown_minutes': 15,      # 15 min entre se√±ales del mismo par
        'min_confidence': 0.6,              # Confianza m√≠nima 60%
        'enable_precaution_alerts': True,   # Activar alertas
        'enable_entry_optimization': True    # Optimizar entradas
    }
    
    # Crear y ejecutar bot
    bot = LiveIntradayTradingBot(config)
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        print("\nüëã Bot detenido por el usuario")
    except Exception as e:
        print(f"‚ùå Error ejecutando bot: {e}")
    finally:
        await bot.stop()

if __name__ == "__main__":
    asyncio.run(main())
